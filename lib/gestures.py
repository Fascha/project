import math
import numpy as np


class GestureTemplate:
    def __init__(self, name, points):
        self.name = name
        self.points = points

    def __len__(self):
        return len(self.points)


class GestureRecognition:

    def __init__(self):
        self.gestures = []

        self.add_template(name='Swipe left', points=[(1071, 339), (1070, 339), (1065.3359977715754, 339), (1064, 339),
                                                     (1059.6719955431508, 339), (1059, 339),
                                                     (1054.05816550956, 338.2940236442229), (1052, 338),
                                                     (1048.415058898167, 338), (1042.7510566697424, 338), (1041, 338),
                                                     (1037.0870544413178, 338), (1031.4230522128933, 338),
                                                     (1025.7590499844687, 338), (1024, 338), (1020.0950477560441, 338),
                                                     (1014.4310455276195, 338), (1008.7670432991949, 338), (1004, 338),
                                                     (1003.1049019834164, 338.0577482591344),
                                                     (997.4526508096178, 338.42240962518594),
                                                     (991.8003996358192, 338.78707099123744),
                                                     (986.1481484620206, 339.15173235728895),
                                                     (980.495897288222, 339.5163937233405),
                                                     (974.8436461144233, 339.881055089392), (973, 340),
                                                     (969.1857438514685, 340.1315260740873),
                                                     (963.5251060440288, 340.3267204812404),
                                                     (957.8644682365891, 340.5219148883935),
                                                     (952.2038304291494, 340.7171092955466),
                                                     (946.5431926217097, 340.91230370269966), (944, 341),
                                                     (940.886776537354, 341.19457646641536),
                                                     (935.233804508742, 341.5478872182036),
                                                     (929.58083248013, 341.90119796999187),
                                                     (923.927860451518, 342.2545087217801),
                                                     (918.274888422906, 342.6078194735684),
                                                     (912.621916394294, 342.9611302253566), (912, 343),
                                                     (906.9668888253633, 343.2796172874798),
                                                     (901.3116071598142, 343.59379960223254),
                                                     (895.6563254942652, 343.90798191698525),
                                                     (890.0010438287161, 344.22216423173796),
                                                     (884.345762163167, 344.5363465464907),
                                                     (878.690480497618, 344.85052886124345), (876, 345),
                                                     (873.0306270465192, 345), (867.3666248180946, 345),
                                                     (861.70262258967, 345), (856.0386203612454, 345),
                                                     (850.3746181328208, 345), (849, 345), (844.7106159043963, 345),
                                                     (839.0466136759717, 345), (833.3826114475471, 345),
                                                     (827.7186092191225, 345), (822.054606990698, 345), (820, 345),
                                                     (816.3906047622734, 345), (810.7266025338488, 345),
                                                     (805.0626003054242, 345), (799.3985980769996, 345),
                                                     (793.734595848575, 345), (789, 345), (788.0705936201505, 345),
                                                     (782.4065913917259, 345), (776.7425891633013, 345),
                                                     (771.0785869348767, 345), (765.4145847064522, 345), (761, 345),
                                                     (759.7505824780276, 345), (754.086580249603, 345),
                                                     (748.4225780211784, 345), (742.7585757927538, 345), (740, 345),
                                                     (737.1283587413772, 345.44179096286507),
                                                     (731.5302192433722, 346.30304319332737), (727, 347),
                                                     (725.9517761098908, 347.2620559725273),
                                                     (720.4568868271782, 348.6357782932054), (719, 349), (716, 350),
                                                     (715.0000000000005, 350), (715, 350)])

        self.add_template(name='Circle clockwise', points=[(906, 263), (906, 262), (907, 262), (909, 261), (912, 261),
                                                           (916, 260), (916.1858488780565, 260), (922, 260),
                                                           (927.6866168640564, 259.28917289199296),
                                                           (930, 259), (937, 259), (939.213636092106, 259), (946, 259),
                                                           (950.75865857328, 259), (958, 259),
                                                           (962.2888150996549, 259.35740125830455),
                                                           (970, 260), (973.5853140666602, 261.2804693095215), (984, 265),
                                                           (984.4413251814685, 265.2036885452932),
                                                           (994.9237366875192, 270.04172462500884),
                                                           (997, 271), (1004.7033600820762, 276.13557338805083), (1009, 279),
                                                           (1013.6888571770066, 283.3281758556985), (1022, 291),
                                                           (1022.1299775925502, 291.1949663888253),
                                                           (1028.534003828282, 300.8010057424232),
                                                           (1030, 303), (1033.9811671144928, 310.9623342289856), (1036, 315),
                                                           (1037.6284717929434, 321.8395815303619),
                                                           (1040.302535987793, 333.07065114873024), (1041, 336),
                                                           (1042.1278570008842, 344.45892750663194), (1043, 351),
                                                           (1043, 355.94606326214534), (1043, 364),
                                                           (1042.6345364412266, 367.47190380834724),
                                                           (1041.425948250529, 378.953491619975),
                                                           (1041, 383), (1039.287665860244, 390.277420093963), (1037, 400),
                                                           (1036.6223888114696, 401.5104447541213), (1034, 412),
                                                           (1033.6365105443565, 412.6361065473761), (1030, 419),
                                                           (1027.9085753472411, 422.6599931423281), (1026, 426),
                                                           (1021.9654110769166, 432.5562070000106), (1018, 439),
                                                           (1015.4528017607607, 442.0566378870871), (1013, 445), (1009, 448),
                                                           (1006.6988517472912, 449.438217657943), (1001, 453),
                                                           (996.684688437534, 455.157655781233), (993, 457), (987, 459),
                                                           (985.9455671164626, 459.3163298650612), (977, 462),
                                                           (974.816590935816, 462.3119155805977), (970, 463),
                                                           (963.372049269745, 463.8284938412819), (962, 464), (954, 465),
                                                           (951.912806512975, 465.2319103874472), (945, 466),
                                                           (940.4103247810941, 466),
                                                           (932, 466), (928.8653022999201, 466), (919, 466),
                                                           (917.3332508250724, 465.79165635313404), (911, 465),
                                                           (906.0361471257303, 463.5817563216372), (897, 461),
                                                           (894.950456962737, 460.3595178008553),
                                                           (883.9309641584921, 456.9159262995288),
                                                           (881, 456), (872.8243232084005, 453.7702699659274), (870, 453),
                                                           (861.9012867593004, 450.0550133670184), (859, 449),
                                                           (851.4350521982394, 445.2175260991197), (849, 444),
                                                           (841.2877025354325, 439.7153902974625), (840, 439), (833, 433),
                                                           (832.4543073029498, 432.34516876353973), (828, 427),
                                                           (825.4554947652307, 423.1832421478461), (824, 421),
                                                           (821.1789030135025, 412.5367090405073), (821, 412), (818, 403),
                                                           (818, 401.50755150226667), (818, 394), (818, 389.9625290210927),
                                                           (818, 384),
                                                           (818, 378.4175065399187), (818, 375), (819, 367),
                                                           (819.007206561837, 366.9351409434661), (820, 358),
                                                           (820.7018837833081, 355.5434067584218),
                                                           (823.8735453809368, 344.4425911667213),
                                                           (824, 344), (827, 334), (827.2037816662928, 333.38865500112144),
                                                           (830, 325),
                                                           (831.6215622269232, 322.8379170307691), (836, 317),
                                                           (837.8995961819828, 313.2008076360344), (839, 311), (844, 305),
                                                           (844.9523452657609, 304.1534708748792), (853, 297),
                                                           (853.6470214192937, 296.56865238713755), (859, 293),
                                                           (863.5719029560305, 290.71404852198475), (865, 290),
                                                           (874.2368217158394, 286.3052713136642), (875, 286), (883, 282),
                                                           (884.6875011572455, 281.43749961425146), (886, 281), (891, 280),
                                                           (896.0234144024183, 279.3720731996977), (899, 279),
                                                           (907.4074364312348, 277.47137519432096), (910, 277), (916, 277),
                                                           (918.909955037652, 277), (921, 277), (926, 277), (930, 277),
                                                           (930.454977518826, 277), (933, 277), (936, 277), (938, 277), (940, 277),
                                                           (942, 277)])

    def distance(self, p1, p2):
        dx = p1[0] - p2[0]
        dy = p1[1] - p2[1]
        return math.sqrt(dx*dx+dy*dy)

    def total_length(self, point_list):
        p1 = point_list[0]
        length = 0.0
        for i in range(1, len(point_list)):
            length += self.distance(p1, point_list[i])
            p1 = point_list[i]
        return length

    def resample(self, point_list, step_count=64):
        new_points = []
        length = self.total_length(point_list)
        step_size = length/step_count
        current_pos = 0
        new_points.append(point_list[0])
        i = 1
        while i < len(point_list):
            p1 = point_list[i-1]
            d = self.distance(p1, point_list[i])
            if current_pos + d >= step_size:
                nx = p1[0] + ((step_size - current_pos) / d) * (point_list[i][0] - p1[0])
                ny = p1[1] + ((step_size - current_pos) / d) * (point_list[i][1] - p1[1])
                new_points.append((nx, ny))
                point_list.insert(i, (nx, ny))
                current_pos = 0
            else:
                current_pos += d
            i += 1

        # hack for umatching lengths
        if len(new_points) < step_count+1:
            for x in range((step_count+1) - len(new_points)):
                new_points.append((nx, ny))
        return new_points

    def rotate(self, points, center, angle_degree):
        new_points = []
        angle_rad = angle_degree * (np.pi / 180)  # degrees multmat
        rot_matrix = np.matrix([[np.cos(angle_rad), -np.sin(angle_rad), 0],  # clockwise
                               [np.sin(angle_rad),  np.cos(angle_rad), 0],
                                [0, 0, 1]])

        t1 = np.matrix([[1, 0, -center[0]],
                        [0, 1, -center[1]],
                        [0, 0, 1]])

        t2 = np.matrix([[1, 0,  center[0]],
                        [0, 1, center[1]],
                        [0, 0, 1]])

        transform = t2  @ rot_matrix @ t1

        for point in points:
            hom_point = np.matrix([[point[0]], [point[1]], [1]])
            rotated_point = transform @ hom_point
            new_points.append((float(rotated_point[0]), float(rotated_point[1])))
        return new_points

    def centroid(self, points):
        xs, ys = zip(*points)
        return sum(xs)/len(xs), sum(ys)/len(ys)

    def angle_between(self, point1, point2):  # point2 is our centroid
        dx = point2[0] - point1[0]
        dy = point2[1] - point1[1]
        return math.atan2(dy, dx) * 180 / math.pi  # degree

    def scale(self, points):
        size = 100
        xs, ys = zip(*points)
        x_min, x_max = min(xs), max(xs)
        y_min, y_max = min(ys), max(ys)
        x_range = x_max - x_min
        y_range = y_max - y_min
        points_new = []
        for p in points:
            p_new = ((p[0] - x_min) * size / x_range,
                     (p[1] - y_min) * size / y_range)
            points_new.append(p_new)
        return points_new

    def normalize(self, points):  # put everything together
        points_new = self.resample(points)
        angle = -self.angle_between(points_new[0], self.centroid(points_new))
        points_new = self.rotate(points_new, self.centroid(points_new), angle)
        points_new = self.scale(points_new)
        return points_new

    def add_template(self, name, points):
        points = self.normalize(points)
        gesture = GestureTemplate(name, points)
        self.gestures.append(gesture)

    def gesture_distance(self, gesture, template):
        total_distance = 0
        if len(gesture) == len(template):
            for p1, p2 in zip(gesture, template.points):
                total_distance += self.distance(p1, p2)

            return total_distance

        else:
            raise Exception("Lenght of gesture isn't matching template")

    def get_gesture(self, points):
        points = self.normalize(points)
        smallest_distance = 1000000
        recognized_template = None
        for template in self.gestures:
            current_distance = self.gesture_distance(points, template)
            print(current_distance)
            if current_distance < smallest_distance:
                smallest_distance = current_distance
                recognized_template = template

        return recognized_template
